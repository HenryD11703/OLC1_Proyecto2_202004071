/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,17],$V7=[1,19],$V8=[1,20],$V9=[1,24],$Va=[1,25],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[5,23,25,26,27,28,29,59,70,74,75,76,77,78,79,81],$Vf=[1,36],$Vg=[1,38],$Vh=[2,18],$Vi=[1,56],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,57],$Vp=[1,59],$Vq=[1,64],$Vr=[1,63],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[23,82],$Vy=[2,15],$Vz=[1,71],$VA=[8,21,24,82],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[1,94],$VN=[1,95],$VO=[1,87],$VP=[8,24,30,39,44,45,46,47,48,50,51,52,53,54,55,56,57,60,62,83],$VQ=[23,33,34,35,36,37,38,41,45,49,58,66,67,68,69],$VR=[8,24,30,39,56,57,60,62,83],$VS=[1,132],$VT=[8,24,30,39,44,45,50,51,52,53,54,55,56,57,60,62,83],$VU=[8,24,30,39,50,51,52,53,54,55,56,57,60,62,83],$VV=[5,23,25,26,27,28,29,59,70,72,74,75,76,77,78,79,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"codigos":4,"EOF":5,"codigo":6,"declaracionv":7,"PYC":8,"impresion":9,"incrementoDec":10,"funcionIf":11,"funcionBreak":12,"funcionWhile":13,"funcionFor":14,"funciondo":15,"funcionContinue":16,"funcionReturn":17,"declaracionArr":18,"tipo":19,"ids":20,"IGUAL":21,"expresion":22,"ID":23,"COMA":24,"INT":25,"DOUBLE":26,"BOOL":27,"CHAR":28,"STD":29,"DOSPUNTOS":30,"STRING":31,"Casteos":32,"NUMERO":33,"DECIMAL":34,"CADENA":35,"TRUE":36,"FALSE":37,"PARENTESISI":38,"PARENTESISD":39,"operacion":40,"CARACTER":41,"ternaryOp":42,"operacionRelacional":43,"MAS":44,"RES":45,"MUL":46,"DIV":47,"MOD":48,"POW":49,"IGUALIGUAL":50,"DIFERENTE":51,"MENOR":52,"MENORIGUAL":53,"MAYOR":54,"MAYORIGUAL":55,"OR":56,"AND":57,"NOT":58,"COUT":59,"MENORMENOR":60,"ENDL":61,"INTERROGACION":62,"MASMAS":63,"MENOSMENOS":64,"tipoDestino":65,"PINTP":66,"PDOUBLEP":67,"PCHARP":68,"PSTRINGP":69,"IF":70,"bloqueCodigo":71,"ELSE":72,"LLAVEI":73,"LLAVED":74,"BREAK":75,"CONTINUE":76,"RETURN":77,"WHILE":78,"FOR":79,"forActualizacion":80,"DO":81,"CORCHETEI":82,"CORCHETED":83,"NEW":84,"lista_valores":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",21:"IGUAL",23:"ID",24:"COMA",25:"INT",26:"DOUBLE",27:"BOOL",28:"CHAR",29:"STD",30:"DOSPUNTOS",31:"STRING",33:"NUMERO",34:"DECIMAL",35:"CADENA",36:"TRUE",37:"FALSE",38:"PARENTESISI",39:"PARENTESISD",41:"CARACTER",44:"MAS",45:"RES",46:"MUL",47:"DIV",48:"MOD",49:"POW",50:"IGUALIGUAL",51:"DIFERENTE",52:"MENOR",53:"MENORIGUAL",54:"MAYOR",55:"MAYORIGUAL",56:"OR",57:"AND",58:"NOT",59:"COUT",60:"MENORMENOR",61:"ENDL",62:"INTERROGACION",63:"MASMAS",64:"MENOSMENOS",66:"PINTP",67:"PDOUBLEP",68:"PCHARP",69:"PSTRINGP",70:"IF",72:"ELSE",73:"LLAVEI",74:"LLAVED",75:"BREAK",76:"CONTINUE",77:"RETURN",78:"WHILE",79:"FOR",81:"DO",82:"CORCHETEI",83:"CORCHETED",84:"NEW",85:"lista_valores"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,2],[7,4],[7,3],[20,1],[20,3],[19,1],[19,1],[19,1],[19,1],[19,4],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,1],[22,1],[22,1],[22,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,6],[40,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[9,4],[9,6],[42,5],[10,2],[10,2],[32,2],[65,1],[65,1],[65,1],[65,1],[11,5],[11,7],[11,7],[71,3],[71,2],[12,2],[16,2],[17,3],[17,2],[13,7],[14,10],[80,3],[80,3],[15,9],[18,11],[18,16],[18,9],[18,14]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 18:
 this.$ = [$$[$0]]; 
break;
case 4: case 6: case 32:
 this.$ = $$[$0-1]; 
break;
case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 25: case 33: case 35: case 36:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = new DeclaracionVar.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0], new Nativo.default($$[$0-1], "nada", _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 16:
 this.$ = new DeclaracionVar.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 17:
 this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 19:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 20:
 this.$ = new Tipo.default(Tipo.TipoDato.ENTERO); 
break;
case 21:
 this.$ = new Tipo.default(Tipo.TipoDato.DECIMAL); 
break;
case 22:
 this.$ = new Tipo.default(Tipo.TipoDato.BOOLEANO); 
break;
case 23:
 this.$ = new Tipo.default(Tipo.TipoDato.CARACTER); 
break;
case 24:
 this.$ = new Tipo.default(Tipo.TipoDato.CADENA); 
break;
case 26:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 27:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 28:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 29:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
break;
case 30:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
break;
case 31:
 this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 34:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 37:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.SUMA,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 38:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.RESTA,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 39:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 40:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 41:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MODULO,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 42:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.POTENCIA,_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 43:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.NEGACION,_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 44:
 this.$ = new Logica.default(Logica.OperadorLogico.IGUALIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 45:
 this.$ = new Logica.default(Logica.OperadorLogico.DIFERENTE,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 46:
 this.$ = new Logica.default(Logica.OperadorLogico.MENOR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 47:
 this.$ = new Logica.default(Logica.OperadorLogico.MENORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 48:
 this.$ = new Logica.default(Logica.OperadorLogico.MAYOR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 49:
 this.$ = new Logica.default(Logica.OperadorLogico.MAYORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 50:
 this.$ = new Logica.default(Logica.OperadorLogico.OR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 51:
 this.$ = new Logica.default(Logica.OperadorLogico.AND,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 52:
 this.$ = new Logica.default(Logica.OperadorLogico.NOT,_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 53:
this.$ = new Imprimir.default($$[$0-1],"", _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 54:
this.$ = new Imprimir.default($$[$0-3],"\n", _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 55:
 this.$ = new OpTernaria.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 56:
 this.$ = new Incremento.default($$[$0-1], "++", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Incremento.default($$[$0-1], "--", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 58:
 this.$ = new Casteos.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = Casteos.TipoCasteo.aENTERO; 
break;
case 60:
 this.$ = Casteos.TipoCasteo.aDECIMAL; 
break;
case 61:
 this.$ = Casteos.TipoCasteo.aCARACTER; 
break;
case 62:
 this.$ = Casteos.TipoCasteo.aCADENA; 
break;
case 63:
 this.$ = new funcionIf.default($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 64: case 65:
 this.$ = new funcionIf.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 66:
 this.$ = new Bloque.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Bloque.default([], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 69:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 70:
 this.$ = new Return.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Return.default(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 72:
 this.$ = new FuncionWhile.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 73:
 this.$ = new FuncionFor.default($$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 74:
 this.$ = new Incremento.default($$[$0-2], "++", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Incremento.default($$[$0-2], "--", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new FuncionDo.default($$[$0-6], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},o($Ve,[2,3]),{8:[1,33]},o($Ve,[2,5]),{8:[1,34]},o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),{20:35,23:$Vf},{21:[1,37],24:$Vg},{60:[1,39]},o([21,24],$Vh,{63:[1,40],64:[1,41]}),{38:[1,42]},{8:[1,43]},{38:[1,44]},{38:[1,45]},{73:[1,46]},{8:[1,47]},{8:[1,49],22:48,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},o($Vx,[2,20]),o($Vx,[2,21]),o($Vx,[2,22]),o($Vx,[2,23]),{30:[1,70]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,6]),{8:$Vy,21:$Vz,24:$Vg,82:[1,72]},o($VA,$Vh),{22:73,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{23:[1,74]},{22:75,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{8:[2,56]},{8:[2,57]},{22:76,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},o($Ve,[2,68]),{22:77,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{7:78,19:79,20:16,23:$Vf,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5},{4:80,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},o($Ve,[2,69]),{8:[1,81],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},o($Ve,[2,71]),o($VP,[2,25]),o($VP,[2,26]),o($VP,[2,27]),o($VP,[2,28]),o($VP,[2,29]),o($VP,[2,30]),o($VP,[2,31]),{22:96,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},o($VP,[2,33]),o($VP,[2,34]),o($VP,[2,35]),o($VP,[2,36]),{22:97,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{38:[1,98]},{22:99,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:100,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),{30:[1,101]},{22:102,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{83:[1,103]},{8:[2,17],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},o($VA,[2,19]),{8:[1,104],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,60:[1,105],62:$VO},{39:[1,106],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},{39:[1,107],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},{8:[1,108]},{20:109,23:$Vf},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,74:[1,110],75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},o($Ve,[2,70]),{22:111,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:112,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:113,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:114,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:115,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:116,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:117,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:118,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:119,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:120,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:121,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:122,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:123,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:124,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{39:[1,125],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},o($VR,[2,58],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),{22:126,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},o($VP,[2,43]),o($VR,[2,52],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),{31:[1,127]},{8:[2,16],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},{21:[1,128],82:[1,129]},o($Ve,[2,53]),{61:[1,130]},{71:131,73:$VS},{73:[1,133]},{22:134,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{8:$Vy,21:$Vz,24:$Vg},{78:[1,135]},o($VT,[2,37],{46:$VD,47:$VE,48:$VF}),o($VT,[2,38],{46:$VD,47:$VE,48:$VF}),o($VP,[2,39]),o($VP,[2,40]),o($VP,[2,41]),{30:[1,136],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},o($VU,[2,44],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VU,[2,45],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VU,[2,46],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VU,[2,47],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VU,[2,48],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VU,[2,49],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o([8,24,30,39,56,60,62,83],[2,50],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,57:$VN}),o($VR,[2,51],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),o($VP,[2,32]),{24:[1,137],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},o($Vx,[2,24]),{82:[1,139],84:[1,138]},{83:[1,140]},{8:[1,141]},o($Ve,[2,63],{72:[1,142]}),{4:143,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,74:[1,144],75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},{4:145,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},{8:[1,146],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},{38:[1,147]},{22:148,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{22:149,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{19:150,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5},{85:[1,151]},{21:[1,152]},o($Ve,[2,54]),{11:154,70:$V7,71:153,73:$VS},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,74:[1,155],75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},o($VV,[2,67]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,74:[1,156],75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},{23:[1,158],80:157},{22:159,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},o([8,24,30,39,60,62,83],[2,55],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN}),{39:[1,160],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},{82:[1,161]},{83:[1,162]},{82:[1,164],84:[1,163]},o($Ve,[2,64]),o($Ve,[2,65]),o($VV,[2,66]),o($Ve,[2,72]),{73:[1,165]},{63:[1,166],64:[1,167]},{39:[1,168],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO},o($VP,[2,42]),{22:169,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{8:[1,170]},{19:171,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5},{85:[1,172]},{4:173,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},{39:[1,174]},{39:[1,175]},{8:[1,176]},{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO,83:[1,177]},o($Ve,[2,79]),{82:[1,178]},{83:[1,179]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,23:$V0,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,59:$V6,70:$V7,74:[1,180],75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd},{73:[2,74]},{73:[2,75]},o($Ve,[2,76]),{8:[1,181]},{22:182,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{82:[1,183]},o($Ve,[2,73]),o($Ve,[2,77]),{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO,83:[1,184]},{85:[1,185]},{82:[1,186]},{83:[1,187]},{22:188,23:$Vi,32:50,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,40:58,41:$Vp,42:60,43:61,45:$Vq,49:$Vr,58:$Vs,65:62,66:$Vt,67:$Vu,68:$Vv,69:$Vw},{8:[1,189]},{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,62:$VO,83:[1,190]},o($Ve,[2,80]),{8:[1,191]},o($Ve,[2,78])],
defaultActions: {31:[2,1],40:[2,56],41:[2,57],174:[2,74],175:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    const Tipo = require('./Analisis/Simbolo/Tipo');

    const Nativo = require('./Analisis/Expresiones/Nativo');
    const Aritmetica = require('./Analisis/Expresiones/Aritmetica');
    const Logica = require('./Analisis/Expresiones/Logica');
    const AccesoVar = require('./Analisis/Expresiones/AccessVar');  
    const OpTernaria = require('./Analisis/Expresiones/OperacionTernaria');
    const Casteos = require('./Analisis/Expresiones/Casteos');

    const Imprimir = require('./Analisis/Instrucciones/Impresion');
    const DeclaracionVar = require('./Analisis/Instrucciones/Declaracion');
    const AsignacionVar = require('./Analisis/Instrucciones/VariablesA');
    const Incremento = require('./Analisis/Instrucciones/Incremento'); 
    const Bloque = require('./Analisis/Instrucciones/Bloque');
    const funcionIf = require('./Analisis/Instrucciones/FuncionIf'); 
    const Break = require('./Analisis/Instrucciones/Break');
    const Continue = require('./Analisis/Instrucciones/Continue');
    const FuncionWhile = require('./Analisis/Instrucciones/FuncionWhile');
    const FuncionFor = require('./Analisis/Instrucciones/FuncionFor');
    const FuncionDo = require('./Analisis/Instrucciones/FuncionDo');
    const Return = require('./Analisis/Instrucciones/Return');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1: cadena = ''; this.begin("string"); 
break;
case 2: cadena += yy_.yytext; 
break;
case 3: cadena += "\""; 
break;
case 4: cadena += "\n"; 
break;
case 5: cadena += " ";  
break;
case 6: cadena += "\t"; 
break;
case 7: cadena += "\\"; 
break;
case 8: cadena += "\'"; 
break;
case 9: cadena += "\r"; 
break;
case 10: yy_.yytext = cadena; this.popState(); return 35; 
break;
case 11:
break;
case 12:
break;
case 13:return 34;
break;
case 14:return 33;
break;
case 15:return 'EXEC';
break;
case 16:return 66;
break;
case 17:return 25;
break;
case 18:return 67;
break;
case 19:return 26;
break;
case 20:return 27;
break;
case 21:return 28;
break;
case 22:return 68;
break;
case 23:return 29;
break;
case 24:return 31;
break;
case 25:return 69;
break;
case 26:return 49;
break;
case 27:return 84;
break;
case 28:return 36;
break;
case 29:return 37;
break;
case 30:return 70;
break;
case 31:return 72;
break;
case 32:return 'SWITCH';
break;
case 33:return 'CASE';
break;
case 34:return 'DEFAULT';
break;
case 35:return 78;
break;
case 36:return 75;
break;
case 37:return 79;
break;
case 38:return 81;
break;
case 39:return 76;
break;
case 40:return 77;
break;
case 41:return 'VOID';
break;
case 42:return 59;
break;
case 43:return 61;
break;
case 44:return 'TOLOWER';
break;
case 45:return 'TOUPPER';
break;
case 46:return 'LENGTH';
break;
case 47:return 'ROUND';
break;
case 48:return 'TYPEOF';
break;
case 49:return 'TOSTRING';
break;
case 50:return 'C_STR';
break;
case 51:return 'EXECUTE';
break;
case 52:return 63;
break;
case 53:return 64;
break;
case 54:return 'PUNTO';
break;
case 55:return 'COMILLAS';
break;
case 56: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length-1); return 41; 
break;
case 57:return 'COMILLA';
break;
case 58:return 'BARRA'; 
break;
case 59:return 46;
break;
case 60:return 30;
break;
case 61:return 44;
break;
case 62:return 45;
break;
case 63:return 38;
break;
case 64:return 39;
break;
case 65:return 24;
break;
case 66:return 48;
break;
case 67:return 50;
break;
case 68:return 21;
break;
case 69:return 51;
break;
case 70:return 58;
break;
case 71:return 53;
break;
case 72:return 60;
break;
case 73:return 52;
break;
case 74:return 55;
break;
case 75:return 54;
break;
case 76:return 62;
break;
case 77:return 56;
break;
case 78:return 57;
break;
case 79:return 8;
break;
case 80:return 73;
break;
case 81:return 74;
break;
case 82:return 82;
break;
case 83:return 83;
break;
case 84:return 23;
break;
case 85:return 47;
break;
case 86:return 5;
break;
case 87:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
break;
case 88:
    

break;
}
},
rules: [/^(?:\s+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\/\/([^\n])*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:EXEC\b)/i,/^(?:\(int\))/i,/^(?:int\b)/i,/^(?:\(double\))/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:\(char\))/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:\(string\))/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\.)/i,/^(?:")/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:')/i,/^(?:\\\\)/i,/^(?:\*)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:\/)/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"string":{"rules":[2,3,4,5,6,7,8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}