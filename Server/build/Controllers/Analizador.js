/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,29],$V2=[1,30],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,19],$V7=[1,21],$V8=[1,22],$V9=[1,26],$Va=[1,27],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,28],$Vf=[5,25,27,28,29,30,31,68,79,83,84,85,86,87,88,90,104,108,109],$Vg=[1,40],$Vh=[1,42],$Vi=[2,20],$Vj=[1,61],$Vk=[1,82],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,62],$Vr=[1,64],$Vs=[1,76],$Vt=[1,75],$Vu=[1,77],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[25,91],$VE=[2,17],$VF=[1,89],$VG=[8,23,26,91],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,107],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[1,114],$VU=[1,106],$VV=[8,26,32,41,53,54,55,56,57,59,60,61,62,63,64,65,66,69,71,92,103],$VW=[25,31,35,36,37,38,39,40,43,54,58,67,75,76,77,78,96,97,98,101],$VX=[8,26,32,41,65,66,69,71,92,103],$VY=[1,170],$VZ=[8,26,32,41,53,54,59,60,61,62,63,64,65,66,69,71,92,103],$V_=[8,26,32,41,59,60,61,62,63,64,65,66,69,71,92,103],$V$=[1,207],$V01=[1,206],$V11=[5,25,27,28,29,30,31,68,79,81,83,84,85,86,87,88,90,104,108,109],$V21=[83,108,109],$V31=[1,233],$V41=[26,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"codigos":4,"EOF":5,"codigo":6,"declaracionv":7,"PYC":8,"impresion":9,"incrementoDec":10,"funcionIf":11,"funcionBreak":12,"funcionWhile":13,"funcionFor":14,"funciondo":15,"funcionContinue":16,"funcionReturn":17,"declaracionArr":18,"modificacionVector":19,"funcionSwitch":20,"tipo":21,"ids":22,"IGUAL":23,"expresion":24,"ID":25,"COMA":26,"INT":27,"DOUBLE":28,"BOOL":29,"CHAR":30,"STD":31,"DOSPUNTOS":32,"STRING":33,"Casteos":34,"NUMERO":35,"DECIMAL":36,"CADENA":37,"TRUE":38,"FALSE":39,"PARENTESISI":40,"PARENTESISD":41,"operacion":42,"CARACTER":43,"ternaryOp":44,"operacionRelacional":45,"accesoVector":46,"funcToLower":47,"funcToUpper":48,"funcionRound":49,"funcionLength":50,"funcionTypeOf":51,"funciontoString":52,"MAS":53,"RES":54,"MUL":55,"DIV":56,"MOD":57,"POW":58,"IGUALIGUAL":59,"DIFERENTE":60,"MENOR":61,"MENORIGUAL":62,"MAYOR":63,"MAYORIGUAL":64,"OR":65,"AND":66,"NOT":67,"COUT":68,"MENORMENOR":69,"ENDL":70,"INTERROGACION":71,"MASMAS":72,"MENOSMENOS":73,"tipoDestino":74,"PINTP":75,"PDOUBLEP":76,"PCHARP":77,"PSTRINGP":78,"IF":79,"bloqueCodigo":80,"ELSE":81,"LLAVEI":82,"LLAVED":83,"BREAK":84,"CONTINUE":85,"RETURN":86,"WHILE":87,"FOR":88,"forActualizacion":89,"DO":90,"CORCHETEI":91,"CORCHETED":92,"NEW":93,"lista_valores":94,"funcioncstr":95,"TOLOWER":96,"TOUPPER":97,"ROUND":98,"PUNTO":99,"LENGTH":100,"TYPEOF":101,"TOSTRING":102,"C_STR":103,"SWITCH":104,"lista_casos":105,"casodefault":106,"caso":107,"CASE":108,"DEFAULT":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",23:"IGUAL",25:"ID",26:"COMA",27:"INT",28:"DOUBLE",29:"BOOL",30:"CHAR",31:"STD",32:"DOSPUNTOS",33:"STRING",35:"NUMERO",36:"DECIMAL",37:"CADENA",38:"TRUE",39:"FALSE",40:"PARENTESISI",41:"PARENTESISD",43:"CARACTER",53:"MAS",54:"RES",55:"MUL",56:"DIV",57:"MOD",58:"POW",59:"IGUALIGUAL",60:"DIFERENTE",61:"MENOR",62:"MENORIGUAL",63:"MAYOR",64:"MAYORIGUAL",65:"OR",66:"AND",67:"NOT",68:"COUT",69:"MENORMENOR",70:"ENDL",71:"INTERROGACION",72:"MASMAS",73:"MENOSMENOS",75:"PINTP",76:"PDOUBLEP",77:"PCHARP",78:"PSTRINGP",79:"IF",81:"ELSE",82:"LLAVEI",83:"LLAVED",84:"BREAK",85:"CONTINUE",86:"RETURN",87:"WHILE",88:"FOR",90:"DO",91:"CORCHETEI",92:"CORCHETED",93:"NEW",96:"TOLOWER",97:"TOUPPER",98:"ROUND",99:"PUNTO",100:"LENGTH",101:"TYPEOF",102:"TOSTRING",103:"C_STR",104:"SWITCH",108:"CASE",109:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[7,2],[7,4],[7,3],[22,1],[22,3],[21,1],[21,1],[21,1],[21,1],[21,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[42,3],[42,3],[42,3],[42,3],[42,3],[42,6],[42,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[9,4],[9,6],[44,5],[10,2],[10,2],[34,2],[74,1],[74,1],[74,1],[74,1],[11,5],[11,7],[11,7],[80,3],[80,2],[12,2],[16,2],[17,3],[17,2],[13,7],[14,10],[89,3],[89,3],[15,9],[18,11],[18,16],[18,9],[18,17],[18,7],[94,3],[94,1],[46,4],[46,7],[19,6],[19,9],[47,4],[48,4],[49,4],[50,5],[51,4],[52,7],[95,4],[20,8],[20,7],[20,7],[105,2],[105,1],[107,4],[106,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 20: case 92: case 108:
 this.$ = [$$[$0]]; 
break;
case 4: case 6: case 15: case 34:
 this.$ = $$[$0-1]; 
break;
case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 16: case 27: case 35: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = new DeclaracionVar.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0], new Nativo.default($$[$0-1], "nada", _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 18:
 this.$ = new DeclaracionVar.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 19:
 this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 21: case 91:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 22:
 this.$ = new Tipo.default(Tipo.TipoDato.ENTERO); 
break;
case 23:
 this.$ = new Tipo.default(Tipo.TipoDato.DECIMAL); 
break;
case 24:
 this.$ = new Tipo.default(Tipo.TipoDato.BOOLEANO); 
break;
case 25:
 this.$ = new Tipo.default(Tipo.TipoDato.CARACTER); 
break;
case 26:
 this.$ = new Tipo.default(Tipo.TipoDato.CADENA); 
break;
case 28:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 29:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 30:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 31:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
break;
case 32:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
break;
case 33:
 this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 36:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 46:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.SUMA,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 47:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.RESTA,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 48:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 49:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 50:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MODULO,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 51:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.POTENCIA,_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 52:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.NEGACION,_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 53:
 this.$ = new Logica.default(Logica.OperadorLogico.IGUALIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 54:
 this.$ = new Logica.default(Logica.OperadorLogico.DIFERENTE,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 55:
 this.$ = new Logica.default(Logica.OperadorLogico.MENOR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 56:
 this.$ = new Logica.default(Logica.OperadorLogico.MENORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 57:
 this.$ = new Logica.default(Logica.OperadorLogico.MAYOR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 58:
 this.$ = new Logica.default(Logica.OperadorLogico.MAYORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 59:
 this.$ = new Logica.default(Logica.OperadorLogico.OR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 60:
 this.$ = new Logica.default(Logica.OperadorLogico.AND,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 61:
 this.$ = new Logica.default(Logica.OperadorLogico.NOT,_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 62:
this.$ = new Imprimir.default($$[$0-1],"", _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 63:
this.$ = new Imprimir.default($$[$0-3],"\n", _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 64:
 this.$ = new OpTernaria.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 65:
 this.$ = new Incremento.default($$[$0-1], "++", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new Incremento.default($$[$0-1], "--", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
 this.$ = new Casteos.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = Casteos.TipoCasteo.aENTERO; 
break;
case 69:
 this.$ = Casteos.TipoCasteo.aDECIMAL; 
break;
case 70:
 this.$ = Casteos.TipoCasteo.aCARACTER; 
break;
case 71:
 this.$ = Casteos.TipoCasteo.aCADENA; 
break;
case 72:
 this.$ = new funcionIf.default($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 73: case 74:
 this.$ = new funcionIf.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 75:
 this.$ = new Bloque.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Bloque.default([], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 78:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 79:
 this.$ = new Return.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Return.default(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 81:
 this.$ = new FuncionWhile.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 82:
 this.$ = new FuncionFor.default($$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 83:
 this.$ = new Incremento.default($$[$0-2], "++", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new Incremento.default($$[$0-2], "--", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new FuncionDo.default($$[$0-6], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 86:
 this.$ = new DeclaracionArr.default($$[$0-10], _$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9], $$[$0-2],null,$$[$0-4],null,null); 
break;
case 87:
 this.$ = new DeclaracionArr.default($$[$0-15], _$[$0-15].first_line, _$[$0-15].first_column, $$[$0-14], $$[$0-5],$$[$0-2],$$[$0-7],null,null); 
break;
case 88:
 this.$ = new DeclaracionArr.default($$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], null,null,null,$$[$0-2],null); 
break;
case 89:
 this.$ = new DeclaracionArr.default($$[$0-16], _$[$0-16].first_line, _$[$0-16].first_column, $$[$0-15], null,null,null,$$[$0-7],$$[$0-3]); 
break;
case 90:
 this.$ = new DeclaracionCstr.default($$[$0-6],$$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 93:
 this.$ = new AccesoVec.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 94:
 this.$ = new AccesoVec.default($$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 95:
 this.$ = new VectorA.default($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 96:
 this.$ = new VectorA.default($$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0], $$[$0-3]); 
break;
case 97:
 this.$ = new toLower.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 98:
 this.$ = new toUpper.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 99:
 this.$ = new Round.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 100:
 this.$ = new Length.default(new AccesoVar.default($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 101:
 this.$ = new TypeOf.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 102:
 this.$ = new toStr.default($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 103:
 this.$ = $$[$0-3]; 
break;
case 104:
 this.$ = new funcionSwitch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 105:
 this.$ = new funcionSwitch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 106:
 this.$ = new funcionSwitch.default($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 107:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 109:
 this.$ = new Caso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 110:
 this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{1:[3]},{5:[1,34],6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},o($Vf,[2,3]),{8:[1,36]},o($Vf,[2,5]),{8:[1,37]},o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{8:[1,38]},o($Vf,[2,16]),{22:39,25:$Vg},{23:[1,41],26:$Vh},{69:[1,43]},o([23,26],$Vi,{72:[1,44],73:[1,45],91:[1,46]}),{40:[1,47]},{8:[1,48]},{40:[1,49]},{40:[1,50]},{82:[1,51]},{8:[1,52]},{8:[1,54],24:53,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{40:[1,87]},o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),{32:[1,88]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,6]),o($Vf,[2,15]),{8:$VE,23:$VF,26:$Vh,91:[1,90]},o($VG,$Vi),{24:91,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{25:[1,92]},{24:93,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{8:[2,65]},{8:[2,66]},{24:94,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:95,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($Vf,[2,77]),{24:96,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{7:97,21:98,22:18,25:$Vg,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5},{4:99,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},o($Vf,[2,78]),{8:[1,100],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},o($Vf,[2,80]),o($VV,[2,27]),o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($VV,[2,32]),o($VV,[2,33],{91:[1,115],99:[1,116]}),{24:117,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($VV,[2,35]),o($VV,[2,36]),o($VV,[2,37]),o($VV,[2,38]),o($VV,[2,39]),o($VV,[2,40]),o($VV,[2,41]),o($VV,[2,42]),o($VV,[2,43]),o($VV,[2,44]),o($VV,[2,45]),{24:118,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{40:[1,119]},{24:120,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:121,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{40:[1,122]},{40:[1,123]},{40:[1,124]},{40:[1,125]},{32:[1,126]},o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),o($VW,[2,71]),{24:127,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{32:[1,128]},{24:129,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{92:[1,130]},{8:[2,19],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},o($VG,[2,21]),{8:[1,131],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,69:[1,132],71:$VU},{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,133]},{41:[1,134],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{41:[1,135],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{8:[1,136]},{22:137,25:$Vg},{6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,83:[1,138],84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},o($Vf,[2,79]),{24:139,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:140,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:141,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:142,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:143,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:144,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:145,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:146,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:147,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:148,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:149,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:150,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:151,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:152,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:153,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{100:[1,154]},{41:[1,155],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},o($VX,[2,67],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR}),{24:156,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($VV,[2,52]),o($VX,[2,61],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR}),{24:157,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:158,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:159,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:160,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{32:[1,161]},{41:[1,162],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{33:[1,163]},{8:[2,18],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{23:[1,164],91:[1,165]},o($Vf,[2,62]),{70:[1,166]},{23:[1,167],91:[1,168]},{80:169,82:$VY},{82:[1,171]},{24:172,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{8:$VE,23:$VF,26:$Vh},{87:[1,173]},o($VZ,[2,46],{55:$VJ,56:$VK,57:$VL}),o($VZ,[2,47],{55:$VJ,56:$VK,57:$VL}),o($VV,[2,48]),o($VV,[2,49]),o($VV,[2,50]),{32:[1,174],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},o($V_,[2,53],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL}),o($V_,[2,54],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL}),o($V_,[2,55],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL}),o($V_,[2,56],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL}),o($V_,[2,57],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL}),o($V_,[2,58],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL}),o([8,26,32,41,65,69,71,92,103],[2,59],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,66:$VT}),o($VX,[2,60],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR}),{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,175]},{40:[1,176]},o($VV,[2,34]),{26:[1,177],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{41:[1,178],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{41:[1,179],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{41:[1,180],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{41:[1,181],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{102:[1,182]},{82:[1,183]},o($VD,[2,26]),{24:187,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,91:[1,185],93:[1,184],95:186,96:$Vz,97:$VA,98:$VB,101:$VC},{92:[1,188]},{8:[1,189]},{24:190,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:191,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($Vf,[2,72],{81:[1,192]}),{4:193,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,83:[1,194],84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{4:195,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{8:[1,196],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{40:[1,197]},{24:198,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($VV,[2,93],{91:[1,199]}),{41:[1,200]},{24:201,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($VV,[2,97]),o($VV,[2,98]),o($VV,[2,99]),o($VV,[2,101]),{40:[1,202]},{105:203,106:204,107:205,108:$V$,109:$V01},{21:208,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5},{24:210,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,94:209,96:$Vz,97:$VA,98:$VB,101:$VC},{8:[1,211]},{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,103:[1,212]},{23:[1,213]},o($Vf,[2,63]),{8:[2,95],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,214]},{11:216,79:$V7,80:215,82:$VY},{6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,83:[1,217],84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},o($V11,[2,76]),{6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,83:[1,218],84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{25:[1,220],89:219},{24:221,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o([8,26,32,41,69,71,92,103],[2,64],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),{24:222,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},o($VV,[2,100]),{41:[1,223],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{24:224,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{83:[1,226],106:225,107:227,108:$V$,109:$V01},{83:[1,228]},o($V21,[2,108]),{32:[1,229]},{24:230,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{91:[1,231]},{26:$V31,92:[1,232]},o($V41,[2,92],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU}),o($Vf,[2,90]),{40:[1,234]},{91:[1,236],93:[1,235]},{23:[1,237]},o($Vf,[2,73]),o($Vf,[2,74]),o($V11,[2,75]),o($Vf,[2,81]),{82:[1,238]},{72:[1,239],73:[1,240]},{41:[1,241],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,242]},o($VV,[2,51]),{41:[1,243],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{83:[1,244]},o($Vf,[2,105]),o($V21,[2,107]),o($Vf,[2,106]),{4:245,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{32:[1,246],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{24:247,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{8:[1,248]},{24:249,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{41:[1,250]},{21:251,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5},{91:[1,252]},{24:253,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{4:254,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{41:[1,255]},{41:[1,256]},{8:[1,257]},o($VV,[2,94]),o($VV,[2,102]),o($Vf,[2,104]),{6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,83:[2,110],84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{4:258,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,259]},o($Vf,[2,88]),o($V41,[2,91],{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU}),{8:[2,103]},{91:[1,260]},{24:210,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,94:261,96:$Vz,97:$VA,98:$VB,101:$VC},{8:[2,96],53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU},{6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,83:[1,262],84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve},{82:[2,83]},{82:[2,84]},o($Vf,[2,85]),o($V21,[2,109],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,6:35,25:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,68:$V6,79:$V7,84:$V8,85:$V9,86:$Va,87:$Vb,88:$Vc,90:$Vd,104:$Ve}),{8:[1,263]},{24:264,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{26:$V31,92:[1,265]},o($Vf,[2,82]),o($Vf,[2,86]),{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,266]},{26:[1,267]},{91:[1,268]},{91:[1,269]},{24:270,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,96:$Vz,97:$VA,98:$VB,101:$VC},{24:210,25:$Vj,31:$Vk,34:55,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,42:63,43:$Vr,44:65,45:66,46:67,47:68,48:69,49:70,50:71,51:72,52:73,54:$Vs,58:$Vt,67:$Vu,74:74,75:$Vv,76:$Vw,77:$Vx,78:$Vy,94:271,96:$Vz,97:$VA,98:$VB,101:$VC},{53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,71:$VU,92:[1,272]},{26:$V31,92:[1,273]},{8:[1,274]},{92:[1,275]},o($Vf,[2,87]),{8:[1,276]},o($Vf,[2,89])],
defaultActions: {34:[2,1],44:[2,65],45:[2,66],250:[2,103],255:[2,83],256:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    const Tipo = require('./Analisis/Simbolo/Tipo');

    const Nativo = require('./Analisis/Expresiones/Nativo');
    const Aritmetica = require('./Analisis/Expresiones/Aritmetica');
    const Logica = require('./Analisis/Expresiones/Logica');
    const AccesoVar = require('./Analisis/Expresiones/AccessVar');  
    const OpTernaria = require('./Analisis/Expresiones/OperacionTernaria');
    const Casteos = require('./Analisis/Expresiones/Casteos');
    const AccesoVec = require('./Analisis/Expresiones/AccesoVec');
    const toLower = require('./Analisis/Expresiones/toLower');
    const toUpper = require('./Analisis/Expresiones/toUpper');
    const Round = require('./Analisis/Expresiones/Round');
    const Length = require('./Analisis/Expresiones/Length');
    const TypeOf = require('./Analisis/Expresiones/TypeOf');
    const toStr = require('./Analisis/Expresiones/toString');
 

    const Imprimir = require('./Analisis/Instrucciones/Impresion');
    const DeclaracionVar = require('./Analisis/Instrucciones/Declaracion');
    const AsignacionVar = require('./Analisis/Instrucciones/VariablesA');
    const Incremento = require('./Analisis/Instrucciones/Incremento'); 
    const Bloque = require('./Analisis/Instrucciones/Bloque');
    const funcionIf = require('./Analisis/Instrucciones/FuncionIf'); 
    const Break = require('./Analisis/Instrucciones/Break');
    const Continue = require('./Analisis/Instrucciones/Continue');
    const FuncionWhile = require('./Analisis/Instrucciones/FuncionWhile');
    const FuncionFor = require('./Analisis/Instrucciones/FuncionFor');
    const FuncionDo = require('./Analisis/Instrucciones/FuncionDo');
    const Return = require('./Analisis/Instrucciones/Return');
    const DeclaracionArr = require('./Analisis/Instrucciones/DeclaracionArr');
    const VectorA = require('./Analisis/Instrucciones/VectorA');
    const DeclaracionCstr = require('./Analisis/Instrucciones/DeclaracionCstr');
    const Caso = require('./Analisis/Instrucciones/Caso');
    const funcionSwitch = require('./Analisis/Instrucciones/FuncionSwitch');
    const Default = require('./Analisis/Instrucciones/Default');
     


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1: cadena = ''; this.begin("string"); 
break;
case 2: cadena += yy_.yytext; 
break;
case 3: cadena += "\""; 
break;
case 4: cadena += "\n"; 
break;
case 5: cadena += " ";  
break;
case 6: cadena += "\t"; 
break;
case 7: cadena += "\\"; 
break;
case 8: cadena += "\'"; 
break;
case 9: cadena += "\r"; 
break;
case 10: yy_.yytext = cadena; this.popState(); return 37; 
break;
case 11:
break;
case 12:
break;
case 13:return 36;
break;
case 14:return 35;
break;
case 15:return 'EXEC';
break;
case 16:return 75;
break;
case 17:return 27;
break;
case 18:return 76;
break;
case 19:return 28;
break;
case 20:return 29;
break;
case 21:return 30;
break;
case 22:return 77;
break;
case 23:return 31;
break;
case 24:return 33;
break;
case 25:return 78;
break;
case 26:return 58;
break;
case 27:return 93;
break;
case 28:return 38;
break;
case 29:return 39;
break;
case 30:return 79;
break;
case 31:return 81;
break;
case 32:return 104;
break;
case 33:return 108;
break;
case 34:return 109;
break;
case 35:return 87;
break;
case 36:return 84;
break;
case 37:return 88;
break;
case 38:return 90;
break;
case 39:return 85;
break;
case 40:return 86;
break;
case 41:return 'VOID';
break;
case 42:return 68;
break;
case 43:return 70;
break;
case 44:return 96;
break;
case 45:return 97;
break;
case 46:return 100;
break;
case 47:return 98;
break;
case 48:return 101;
break;
case 49:return 102;
break;
case 50:return 103;
break;
case 51:return 'EXECUTE';
break;
case 52:return 72;
break;
case 53:return 73;
break;
case 54:return 99;
break;
case 55:return 'COMILLAS';
break;
case 56: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length-1); return 43; 
break;
case 57:return 'COMILLA';
break;
case 58:return 'BARRA'; 
break;
case 59:return 55;
break;
case 60:return 32;
break;
case 61:return 53;
break;
case 62:return 54;
break;
case 63:return 40;
break;
case 64:return 41;
break;
case 65:return 26;
break;
case 66:return 57;
break;
case 67:return 59;
break;
case 68:return 23;
break;
case 69:return 60;
break;
case 70:return 67;
break;
case 71:return 62;
break;
case 72:return 69;
break;
case 73:return 61;
break;
case 74:return 64;
break;
case 75:return 63;
break;
case 76:return 71;
break;
case 77:return 65;
break;
case 78:return 66;
break;
case 79:return 8;
break;
case 80:return 82;
break;
case 81:return 83;
break;
case 82:return 91;
break;
case 83:return 92;
break;
case 84:return 25;
break;
case 85:return 56;
break;
case 86:return 5;
break;
case 87:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
break;
case 88:
    

break;
}
},
rules: [/^(?:\s+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\/\/([^\n])*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:EXEC\b)/i,/^(?:\(int\))/i,/^(?:int\b)/i,/^(?:\(double\))/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:\(char\))/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:\(string\))/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:\.c_str\b)/i,/^(?:execute\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\.)/i,/^(?:")/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:')/i,/^(?:\\\\)/i,/^(?:\*)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:\/)/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"string":{"rules":[2,3,4,5,6,7,8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}