/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,27],$V2=[1,28],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,18],$V7=[1,20],$V8=[1,21],$V9=[1,25],$Va=[1,26],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[5,24,26,27,28,29,30,67,78,82,83,84,85,86,87,89],$Vf=[1,38],$Vg=[1,40],$Vh=[2,19],$Vi=[1,59],$Vj=[1,80],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,60],$Vq=[1,62],$Vr=[1,74],$Vs=[1,73],$Vt=[1,75],$Vu=[1,81],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[24,90],$VD=[2,16],$VE=[1,86],$VF=[8,22,25,90],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[1,107],$VP=[1,108],$VQ=[1,109],$VR=[1,110],$VS=[1,111],$VT=[1,103],$VU=[8,25,31,40,52,53,54,55,56,58,59,60,61,62,63,64,65,68,70,91,102],$VV=[24,30,34,35,36,37,38,39,42,53,57,66,74,75,76,77,95,96,97,100],$VW=[8,25,31,40,64,65,68,70,91,102],$VX=[1,165],$VY=[8,25,31,40,52,53,58,59,60,61,62,63,64,65,68,70,91,102],$VZ=[8,25,31,40,58,59,60,61,62,63,64,65,68,70,91,102],$V_=[5,24,26,27,28,29,30,67,78,80,82,83,84,85,86,87,89],$V$=[1,216],$V01=[25,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"codigos":4,"EOF":5,"codigo":6,"declaracionv":7,"PYC":8,"impresion":9,"incrementoDec":10,"funcionIf":11,"funcionBreak":12,"funcionWhile":13,"funcionFor":14,"funciondo":15,"funcionContinue":16,"funcionReturn":17,"declaracionArr":18,"modificacionVector":19,"tipo":20,"ids":21,"IGUAL":22,"expresion":23,"ID":24,"COMA":25,"INT":26,"DOUBLE":27,"BOOL":28,"CHAR":29,"STD":30,"DOSPUNTOS":31,"STRING":32,"Casteos":33,"NUMERO":34,"DECIMAL":35,"CADENA":36,"TRUE":37,"FALSE":38,"PARENTESISI":39,"PARENTESISD":40,"operacion":41,"CARACTER":42,"ternaryOp":43,"operacionRelacional":44,"accesoVector":45,"funcToLower":46,"funcToUpper":47,"funcionRound":48,"funcionLength":49,"funcionTypeOf":50,"funciontoString":51,"MAS":52,"RES":53,"MUL":54,"DIV":55,"MOD":56,"POW":57,"IGUALIGUAL":58,"DIFERENTE":59,"MENOR":60,"MENORIGUAL":61,"MAYOR":62,"MAYORIGUAL":63,"OR":64,"AND":65,"NOT":66,"COUT":67,"MENORMENOR":68,"ENDL":69,"INTERROGACION":70,"MASMAS":71,"MENOSMENOS":72,"tipoDestino":73,"PINTP":74,"PDOUBLEP":75,"PCHARP":76,"PSTRINGP":77,"IF":78,"bloqueCodigo":79,"ELSE":80,"LLAVEI":81,"LLAVED":82,"BREAK":83,"CONTINUE":84,"RETURN":85,"WHILE":86,"FOR":87,"forActualizacion":88,"DO":89,"CORCHETEI":90,"CORCHETED":91,"NEW":92,"lista_valores":93,"funcioncstr":94,"TOLOWER":95,"TOUPPER":96,"ROUND":97,"PUNTO":98,"LENGTH":99,"TYPEOF":100,"TOSTRING":101,"C_STR":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",22:"IGUAL",24:"ID",25:"COMA",26:"INT",27:"DOUBLE",28:"BOOL",29:"CHAR",30:"STD",31:"DOSPUNTOS",32:"STRING",34:"NUMERO",35:"DECIMAL",36:"CADENA",37:"TRUE",38:"FALSE",39:"PARENTESISI",40:"PARENTESISD",42:"CARACTER",52:"MAS",53:"RES",54:"MUL",55:"DIV",56:"MOD",57:"POW",58:"IGUALIGUAL",59:"DIFERENTE",60:"MENOR",61:"MENORIGUAL",62:"MAYOR",63:"MAYORIGUAL",64:"OR",65:"AND",66:"NOT",67:"COUT",68:"MENORMENOR",69:"ENDL",70:"INTERROGACION",71:"MASMAS",72:"MENOSMENOS",74:"PINTP",75:"PDOUBLEP",76:"PCHARP",77:"PSTRINGP",78:"IF",80:"ELSE",81:"LLAVEI",82:"LLAVED",83:"BREAK",84:"CONTINUE",85:"RETURN",86:"WHILE",87:"FOR",89:"DO",90:"CORCHETEI",91:"CORCHETED",92:"NEW",95:"TOLOWER",96:"TOUPPER",97:"ROUND",98:"PUNTO",99:"LENGTH",100:"TYPEOF",101:"TOSTRING",102:"C_STR"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,2],[7,4],[7,3],[21,1],[21,3],[20,1],[20,1],[20,1],[20,1],[20,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,6],[41,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[9,4],[9,6],[43,5],[10,2],[10,2],[33,2],[73,1],[73,1],[73,1],[73,1],[11,5],[11,7],[11,7],[79,3],[79,2],[12,2],[16,2],[17,3],[17,2],[13,7],[14,10],[88,3],[88,3],[15,9],[18,11],[18,16],[18,9],[18,17],[18,7],[93,3],[93,1],[45,4],[45,7],[19,6],[19,9],[46,4],[47,4],[48,4],[49,5],[50,4],[51,7],[94,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 19: case 91:
 this.$ = [$$[$0]]; 
break;
case 4: case 6: case 15: case 33:
 this.$ = $$[$0-1]; 
break;
case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 26: case 34: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = new DeclaracionVar.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0], new Nativo.default($$[$0-1], "nada", _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 17:
 this.$ = new DeclaracionVar.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 18:
 this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20: case 90:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 21:
 this.$ = new Tipo.default(Tipo.TipoDato.ENTERO); 
break;
case 22:
 this.$ = new Tipo.default(Tipo.TipoDato.DECIMAL); 
break;
case 23:
 this.$ = new Tipo.default(Tipo.TipoDato.BOOLEANO); 
break;
case 24:
 this.$ = new Tipo.default(Tipo.TipoDato.CARACTER); 
break;
case 25:
 this.$ = new Tipo.default(Tipo.TipoDato.CADENA); 
break;
case 27:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 28:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 29:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 30:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
break;
case 31:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
break;
case 32:
 this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 35:
 this.$ = new Nativo.default(new Tipo.default(Tipo.TipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 45:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.SUMA,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 46:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.RESTA,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 47:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 48:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 49:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MODULO,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 50:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.POTENCIA,_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 51:
 this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.NEGACION,_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 52:
 this.$ = new Logica.default(Logica.OperadorLogico.IGUALIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 53:
 this.$ = new Logica.default(Logica.OperadorLogico.DIFERENTE,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 54:
 this.$ = new Logica.default(Logica.OperadorLogico.MENOR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 55:
 this.$ = new Logica.default(Logica.OperadorLogico.MENORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 56:
 this.$ = new Logica.default(Logica.OperadorLogico.MAYOR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 57:
 this.$ = new Logica.default(Logica.OperadorLogico.MAYORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 58:
 this.$ = new Logica.default(Logica.OperadorLogico.OR,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 59:
 this.$ = new Logica.default(Logica.OperadorLogico.AND,_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 60:
 this.$ = new Logica.default(Logica.OperadorLogico.NOT,_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 61:
this.$ = new Imprimir.default($$[$0-1],"", _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 62:
this.$ = new Imprimir.default($$[$0-3],"\n", _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 63:
 this.$ = new OpTernaria.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 64:
 this.$ = new Incremento.default($$[$0-1], "++", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new Incremento.default($$[$0-1], "--", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new Casteos.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
 this.$ = Casteos.TipoCasteo.aENTERO; 
break;
case 68:
 this.$ = Casteos.TipoCasteo.aDECIMAL; 
break;
case 69:
 this.$ = Casteos.TipoCasteo.aCARACTER; 
break;
case 70:
 this.$ = Casteos.TipoCasteo.aCADENA; 
break;
case 71:
 this.$ = new funcionIf.default($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 72: case 73:
 this.$ = new funcionIf.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 74:
 this.$ = new Bloque.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Bloque.default([], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 76:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 78:
 this.$ = new Return.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Return.default(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 80:
 this.$ = new FuncionWhile.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 81:
 this.$ = new FuncionFor.default($$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 82:
 this.$ = new Incremento.default($$[$0-2], "++", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Incremento.default($$[$0-2], "--", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new FuncionDo.default($$[$0-6], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 85:
 this.$ = new DeclaracionArr.default($$[$0-10], _$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9], $$[$0-2],null,$$[$0-4],null,null); 
break;
case 86:
 this.$ = new DeclaracionArr.default($$[$0-15], _$[$0-15].first_line, _$[$0-15].first_column, $$[$0-14], $$[$0-5],$$[$0-2],$$[$0-7],null,null); 
break;
case 87:
 this.$ = new DeclaracionArr.default($$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], null,null,null,$$[$0-2],null); 
break;
case 88:
 this.$ = new DeclaracionArr.default($$[$0-16], _$[$0-16].first_line, _$[$0-16].first_column, $$[$0-15], null,null,null,$$[$0-7],$$[$0-3]); 
break;
case 89:
 this.$ = new DeclaracionCstr.default($$[$0-6],$$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 92:
 this.$ = new AccesoVec.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 93:
 this.$ = new AccesoVec.default($$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 94:
 this.$ = new VectorA.default($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 95:
 this.$ = new VectorA.default($$[$0-8], _$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0], $$[$0-3]); 
break;
case 96:
 this.$ = new toLower.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 97:
 this.$ = new toUpper.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 98:
 this.$ = new Round.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 99:
 this.$ = new Length.default(new AccesoVar.default($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 100:
 this.$ = new TypeOf.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 101:
 this.$ = new toStr.default($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 102:
 this.$ = $$[$0-3]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},{1:[3]},{5:[1,32],6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},o($Ve,[2,3]),{8:[1,34]},o($Ve,[2,5]),{8:[1,35]},o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),{8:[1,36]},{21:37,24:$Vf},{22:[1,39],25:$Vg},{68:[1,41]},o([22,25],$Vh,{71:[1,42],72:[1,43],90:[1,44]}),{39:[1,45]},{8:[1,46]},{39:[1,47]},{39:[1,48]},{81:[1,49]},{8:[1,50]},{8:[1,52],23:51,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($VC,[2,21]),o($VC,[2,22]),o($VC,[2,23]),o($VC,[2,24]),{31:[1,85]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,6]),o($Ve,[2,15]),{8:$VD,22:$VE,25:$Vg,90:[1,87]},o($VF,$Vh),{23:88,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{24:[1,89]},{23:90,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{8:[2,64]},{8:[2,65]},{23:91,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:92,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($Ve,[2,76]),{23:93,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{7:94,20:95,21:17,24:$Vf,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},{4:96,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},o($Ve,[2,77]),{8:[1,97],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},o($Ve,[2,79]),o($VU,[2,26]),o($VU,[2,27]),o($VU,[2,28]),o($VU,[2,29]),o($VU,[2,30]),o($VU,[2,31]),o($VU,[2,32],{90:[1,112],98:[1,113]}),{23:114,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($VU,[2,34]),o($VU,[2,35]),o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),{23:115,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{39:[1,116]},{23:117,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:118,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{39:[1,119]},{39:[1,120]},{39:[1,121]},{39:[1,122]},{31:[1,123]},o($VV,[2,67]),o($VV,[2,68]),o($VV,[2,69]),o($VV,[2,70]),{31:[1,124]},{23:125,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{91:[1,126]},{8:[2,18],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},o($VF,[2,20]),{8:[1,127],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,68:[1,128],70:$VT},{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,129]},{40:[1,130],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{40:[1,131],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{8:[1,132]},{21:133,24:$Vf},{6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,82:[1,134],83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},o($Ve,[2,78]),{23:135,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:136,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:137,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:138,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:139,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:140,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:141,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:142,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:143,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:144,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:145,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:146,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:147,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:148,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:149,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{99:[1,150]},{40:[1,151],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},o($VW,[2,66],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ}),{23:152,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($VU,[2,51]),o($VW,[2,60],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ}),{23:153,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:154,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:155,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:156,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{31:[1,157]},{32:[1,158]},{8:[2,17],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{22:[1,159],90:[1,160]},o($Ve,[2,61]),{69:[1,161]},{22:[1,162],90:[1,163]},{79:164,81:$VX},{81:[1,166]},{23:167,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{8:$VD,22:$VE,25:$Vg},{86:[1,168]},o($VY,[2,45],{54:$VI,55:$VJ,56:$VK}),o($VY,[2,46],{54:$VI,55:$VJ,56:$VK}),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),{31:[1,169],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},o($VZ,[2,52],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($VZ,[2,53],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($VZ,[2,54],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($VZ,[2,55],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($VZ,[2,56],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($VZ,[2,57],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o([8,25,31,40,64,68,70,91,102],[2,58],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,65:$VS}),o($VW,[2,59],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ}),{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,170]},{39:[1,171]},o($VU,[2,33]),{25:[1,172],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{40:[1,173],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{40:[1,174],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{40:[1,175],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{40:[1,176],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{101:[1,177]},o($VC,[2,25]),{23:181,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,90:[1,179],92:[1,178],94:180,95:$Vy,96:$Vz,97:$VA,100:$VB},{91:[1,182]},{8:[1,183]},{23:184,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:185,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($Ve,[2,71],{80:[1,186]}),{4:187,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,82:[1,188],83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},{4:189,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},{8:[1,190],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{39:[1,191]},{23:192,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($VU,[2,92],{90:[1,193]}),{40:[1,194]},{23:195,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,100]),{39:[1,196]},{20:197,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},{23:199,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,93:198,95:$Vy,96:$Vz,97:$VA,100:$VB},{8:[1,200]},{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,102:[1,201]},{22:[1,202]},o($Ve,[2,62]),{8:[2,94],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,203]},{11:205,78:$V7,79:204,81:$VX},{6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,82:[1,206],83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},o($V_,[2,75]),{6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,82:[1,207],83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},{24:[1,209],88:208},{23:210,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o([8,25,31,40,68,70,91,102],[2,63],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS}),{23:211,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},o($VU,[2,99]),{40:[1,212],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{23:213,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{90:[1,214]},{25:$V$,91:[1,215]},o($V01,[2,91],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT}),o($Ve,[2,89]),{39:[1,217]},{90:[1,219],92:[1,218]},{22:[1,220]},o($Ve,[2,72]),o($Ve,[2,73]),o($V_,[2,74]),o($Ve,[2,80]),{81:[1,221]},{71:[1,222],72:[1,223]},{40:[1,224],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,225]},o($VU,[2,50]),{40:[1,226],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{23:227,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{8:[1,228]},{23:229,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{40:[1,230]},{20:231,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},{90:[1,232]},{23:233,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{4:234,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},{40:[1,235]},{40:[1,236]},{8:[1,237]},o($VU,[2,93]),o($VU,[2,101]),{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,238]},o($Ve,[2,87]),o($V01,[2,90],{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT}),{8:[2,102]},{90:[1,239]},{23:199,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,93:240,95:$Vy,96:$Vz,97:$VA,100:$VB},{8:[2,95],52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT},{6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,67:$V6,78:$V7,82:[1,241],83:$V8,84:$V9,85:$Va,86:$Vb,87:$Vc,89:$Vd},{81:[2,82]},{81:[2,83]},o($Ve,[2,84]),{8:[1,242]},{23:243,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{25:$V$,91:[1,244]},o($Ve,[2,81]),o($Ve,[2,85]),{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,245]},{25:[1,246]},{90:[1,247]},{90:[1,248]},{23:249,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,95:$Vy,96:$Vz,97:$VA,100:$VB},{23:199,24:$Vi,30:$Vj,33:53,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,41:61,42:$Vq,43:63,44:64,45:65,46:66,47:67,48:68,49:69,50:70,51:71,53:$Vr,57:$Vs,66:$Vt,73:72,74:$Vu,75:$Vv,76:$Vw,77:$Vx,93:250,95:$Vy,96:$Vz,97:$VA,100:$VB},{52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,70:$VT,91:[1,251]},{25:$V$,91:[1,252]},{8:[1,253]},{91:[1,254]},o($Ve,[2,86]),{8:[1,255]},o($Ve,[2,88])],
defaultActions: {32:[2,1],42:[2,64],43:[2,65],230:[2,102],235:[2,82],236:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    const Tipo = require('./Analisis/Simbolo/Tipo');

    const Nativo = require('./Analisis/Expresiones/Nativo');
    const Aritmetica = require('./Analisis/Expresiones/Aritmetica');
    const Logica = require('./Analisis/Expresiones/Logica');
    const AccesoVar = require('./Analisis/Expresiones/AccessVar');  
    const OpTernaria = require('./Analisis/Expresiones/OperacionTernaria');
    const Casteos = require('./Analisis/Expresiones/Casteos');
    const AccesoVec = require('./Analisis/Expresiones/AccesoVec');
    const toLower = require('./Analisis/Expresiones/toLower');
    const toUpper = require('./Analisis/Expresiones/toUpper');
    const Round = require('./Analisis/Expresiones/Round');
    const Length = require('./Analisis/Expresiones/Length');
    const TypeOf = require('./Analisis/Expresiones/TypeOf');
    const toStr = require('./Analisis/Expresiones/toString');
 

    const Imprimir = require('./Analisis/Instrucciones/Impresion');
    const DeclaracionVar = require('./Analisis/Instrucciones/Declaracion');
    const AsignacionVar = require('./Analisis/Instrucciones/VariablesA');
    const Incremento = require('./Analisis/Instrucciones/Incremento'); 
    const Bloque = require('./Analisis/Instrucciones/Bloque');
    const funcionIf = require('./Analisis/Instrucciones/FuncionIf'); 
    const Break = require('./Analisis/Instrucciones/Break');
    const Continue = require('./Analisis/Instrucciones/Continue');
    const FuncionWhile = require('./Analisis/Instrucciones/FuncionWhile');
    const FuncionFor = require('./Analisis/Instrucciones/FuncionFor');
    const FuncionDo = require('./Analisis/Instrucciones/FuncionDo');
    const Return = require('./Analisis/Instrucciones/Return');
    const DeclaracionArr = require('./Analisis/Instrucciones/DeclaracionArr');
    const VectorA = require('./Analisis/Instrucciones/VectorA');
    const DeclaracionCstr = require('./Analisis/Instrucciones/DeclaracionCstr');
     


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1: cadena = ''; this.begin("string"); 
break;
case 2: cadena += yy_.yytext; 
break;
case 3: cadena += "\""; 
break;
case 4: cadena += "\n"; 
break;
case 5: cadena += " ";  
break;
case 6: cadena += "\t"; 
break;
case 7: cadena += "\\"; 
break;
case 8: cadena += "\'"; 
break;
case 9: cadena += "\r"; 
break;
case 10: yy_.yytext = cadena; this.popState(); return 36; 
break;
case 11:
break;
case 12:
break;
case 13:return 35;
break;
case 14:return 34;
break;
case 15:return 'EXEC';
break;
case 16:return 74;
break;
case 17:return 26;
break;
case 18:return 75;
break;
case 19:return 27;
break;
case 20:return 28;
break;
case 21:return 29;
break;
case 22:return 76;
break;
case 23:return 30;
break;
case 24:return 32;
break;
case 25:return 77;
break;
case 26:return 57;
break;
case 27:return 92;
break;
case 28:return 37;
break;
case 29:return 38;
break;
case 30:return 78;
break;
case 31:return 80;
break;
case 32:return 'SWITCH';
break;
case 33:return 'CASE';
break;
case 34:return 'DEFAULT';
break;
case 35:return 86;
break;
case 36:return 83;
break;
case 37:return 87;
break;
case 38:return 89;
break;
case 39:return 84;
break;
case 40:return 85;
break;
case 41:return 'VOID';
break;
case 42:return 67;
break;
case 43:return 69;
break;
case 44:return 95;
break;
case 45:return 96;
break;
case 46:return 99;
break;
case 47:return 97;
break;
case 48:return 100;
break;
case 49:return 101;
break;
case 50:return 102;
break;
case 51:return 'EXECUTE';
break;
case 52:return 71;
break;
case 53:return 72;
break;
case 54:return 98;
break;
case 55:return 'COMILLAS';
break;
case 56: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length-1); return 42; 
break;
case 57:return 'COMILLA';
break;
case 58:return 'BARRA'; 
break;
case 59:return 54;
break;
case 60:return 31;
break;
case 61:return 52;
break;
case 62:return 53;
break;
case 63:return 39;
break;
case 64:return 40;
break;
case 65:return 25;
break;
case 66:return 56;
break;
case 67:return 58;
break;
case 68:return 22;
break;
case 69:return 59;
break;
case 70:return 66;
break;
case 71:return 61;
break;
case 72:return 68;
break;
case 73:return 60;
break;
case 74:return 63;
break;
case 75:return 62;
break;
case 76:return 70;
break;
case 77:return 64;
break;
case 78:return 65;
break;
case 79:return 8;
break;
case 80:return 81;
break;
case 81:return 82;
break;
case 82:return 90;
break;
case 83:return 91;
break;
case 84:return 24;
break;
case 85:return 55;
break;
case 86:return 5;
break;
case 87:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
break;
case 88:
    

break;
}
},
rules: [/^(?:\s+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\/\/([^\n])*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:EXEC\b)/i,/^(?:\(int\))/i,/^(?:int\b)/i,/^(?:\(double\))/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:\(char\))/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:\(string\))/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:\.c_str\b)/i,/^(?:execute\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\.)/i,/^(?:")/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:')/i,/^(?:\\\\)/i,/^(?:\*)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:\/)/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"string":{"rules":[2,3,4,5,6,7,8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}